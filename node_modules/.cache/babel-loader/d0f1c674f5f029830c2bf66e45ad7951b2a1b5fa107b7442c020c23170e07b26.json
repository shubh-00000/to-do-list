{"ast":null,"code":"'use client';\n\nimport { useState, useCallback } from 'react';\nimport { getAllCheckedNodes } from './get-all-checked-nodes/get-all-checked-nodes.mjs';\nimport { getChildrenNodesValues } from './get-children-nodes-values/get-children-nodes-values.mjs';\nimport { memoizedIsNodeChecked } from './is-node-checked/is-node-checked.mjs';\nimport { memoizedIsNodeIndeterminate } from './is-node-indeterminate/is-node-indeterminate.mjs';\nfunction getInitialExpandedState(initialState, data, value, acc = {}) {\n  data.forEach(node => {\n    acc[node.value] = node.value in initialState ? initialState[node.value] : node.value === value;\n    if (Array.isArray(node.children)) {\n      getInitialExpandedState(initialState, node.children, value, acc);\n    }\n  });\n  return acc;\n}\nfunction getInitialCheckedState(initialState, data) {\n  const acc = [];\n  initialState.forEach(node => acc.push(...getChildrenNodesValues(node, data)));\n  return acc;\n}\nfunction useTree({\n  initialSelectedState = [],\n  initialCheckedState = [],\n  initialExpandedState = {},\n  multiple = false\n} = {}) {\n  const [data, setData] = useState([]);\n  const [expandedState, setExpandedState] = useState(initialExpandedState);\n  const [selectedState, setSelectedState] = useState(initialSelectedState);\n  const [checkedState, setCheckedState] = useState(initialCheckedState);\n  const [anchorNode, setAnchorNode] = useState(null);\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const initialize = useCallback(_data => {\n    setExpandedState(current => getInitialExpandedState(current, _data, selectedState));\n    setCheckedState(current => getInitialCheckedState(current, _data));\n    setData(_data);\n  }, [selectedState, checkedState]);\n  const toggleExpanded = useCallback(value => {\n    setExpandedState(current => ({\n      ...current,\n      [value]: !current[value]\n    }));\n  }, []);\n  const collapse = useCallback(value => {\n    setExpandedState(current => ({\n      ...current,\n      [value]: false\n    }));\n  }, []);\n  const expand = useCallback(value => {\n    setExpandedState(current => ({\n      ...current,\n      [value]: true\n    }));\n  }, []);\n  const expandAllNodes = useCallback(() => {\n    setExpandedState(current => {\n      const next = {\n        ...current\n      };\n      Object.keys(next).forEach(key => {\n        next[key] = true;\n      });\n      return next;\n    });\n  }, []);\n  const collapseAllNodes = useCallback(() => {\n    setExpandedState(current => {\n      const next = {\n        ...current\n      };\n      Object.keys(next).forEach(key => {\n        next[key] = false;\n      });\n      return next;\n    });\n  }, []);\n  const toggleSelected = useCallback(value => setSelectedState(current => {\n    if (!multiple) {\n      if (current.includes(value)) {\n        setAnchorNode(null);\n        return [];\n      }\n      setAnchorNode(value);\n      return [value];\n    }\n    if (current.includes(value)) {\n      setAnchorNode(null);\n      return current.filter(item => item !== value);\n    }\n    setAnchorNode(value);\n    return [...current, value];\n  }), []);\n  const select = useCallback(value => {\n    setAnchorNode(value);\n    setSelectedState(current => multiple ? current.includes(value) ? current : [...current, value] : [value]);\n  }, []);\n  const deselect = useCallback(value => {\n    anchorNode === value && setAnchorNode(null);\n    setSelectedState(current => current.filter(item => item !== value));\n  }, []);\n  const clearSelected = useCallback(() => {\n    setSelectedState([]);\n    setAnchorNode(null);\n  }, []);\n  const checkNode = useCallback(value => {\n    const checkedNodes = getChildrenNodesValues(value, data);\n    setCheckedState(current => Array.from(/* @__PURE__ */new Set([...current, ...checkedNodes])));\n  }, [data]);\n  const uncheckNode = useCallback(value => {\n    const checkedNodes = getChildrenNodesValues(value, data);\n    setCheckedState(current => current.filter(item => !checkedNodes.includes(item)));\n  }, [data]);\n  const getCheckedNodes = () => getAllCheckedNodes(data, checkedState).result;\n  const isNodeChecked = value => memoizedIsNodeChecked(value, data, checkedState);\n  const isNodeIndeterminate = value => memoizedIsNodeIndeterminate(value, data, checkedState);\n  return {\n    multiple,\n    expandedState,\n    selectedState,\n    checkedState,\n    anchorNode,\n    initialize,\n    toggleExpanded,\n    collapse,\n    expand,\n    expandAllNodes,\n    collapseAllNodes,\n    setExpandedState,\n    checkNode,\n    uncheckNode,\n    toggleSelected,\n    select,\n    deselect,\n    clearSelected,\n    setSelectedState,\n    hoveredNode,\n    setHoveredNode,\n    getCheckedNodes,\n    isNodeChecked,\n    isNodeIndeterminate\n  };\n}\nexport { useTree };","map":{"version":3,"names":["getInitialExpandedState","initialState","data","value","acc","forEach","node","Array","isArray","children","getInitialCheckedState","push","getChildrenNodesValues","useTree","initialSelectedState","initialCheckedState","initialExpandedState","multiple","setData","useState","expandedState","setExpandedState","selectedState","setSelectedState","checkedState","setCheckedState","anchorNode","setAnchorNode","hoveredNode","setHoveredNode","initialize","useCallback","_data","current","toggleExpanded","collapse","expand","expandAllNodes","next","Object","keys","key","collapseAllNodes","toggleSelected","includes","filter","item","select","deselect","clearSelected","checkNode","checkedNodes","from","Set","uncheckNode","getCheckedNodes","getAllCheckedNodes","result","isNodeChecked","memoizedIsNodeChecked","isNodeIndeterminate","memoizedIsNodeIndeterminate"],"sources":["C:\\Users\\arora\\OneDrive\\Desktop\\g\\new\\node_modules\\@mantine\\core\\src\\components\\Tree\\use-tree.ts"],"sourcesContent":["import { useCallback, useState } from 'react';\nimport {\n  CheckedNodeStatus,\n  getAllCheckedNodes,\n} from './get-all-checked-nodes/get-all-checked-nodes';\nimport { getChildrenNodesValues } from './get-children-nodes-values/get-children-nodes-values';\nimport { memoizedIsNodeChecked } from './is-node-checked/is-node-checked';\nimport { memoizedIsNodeIndeterminate } from './is-node-indeterminate/is-node-indeterminate';\nimport type { TreeNodeData } from './Tree';\n\nexport type TreeExpandedState = Record<string, boolean>;\n\nfunction getInitialExpandedState(\n  initialState: TreeExpandedState,\n  data: TreeNodeData[],\n  value: string | string[] | undefined,\n  acc: TreeExpandedState = {}\n) {\n  data.forEach((node) => {\n    acc[node.value] = node.value in initialState ? initialState[node.value] : node.value === value;\n\n    if (Array.isArray(node.children)) {\n      getInitialExpandedState(initialState, node.children, value, acc);\n    }\n  });\n\n  return acc;\n}\n\nfunction getInitialCheckedState(initialState: string[], data: TreeNodeData[]) {\n  const acc: string[] = [];\n\n  initialState.forEach((node) => acc.push(...getChildrenNodesValues(node, data)));\n\n  return acc;\n}\n\nexport interface UseTreeInput {\n  /** Initial expanded state of all nodes */\n  initialExpandedState?: TreeExpandedState;\n\n  /** Initial selected state of nodes */\n  initialSelectedState?: string[];\n\n  /** Initial checked state of nodes */\n  initialCheckedState?: string[];\n\n  /** Determines whether multiple node can be selected at a time */\n  multiple?: boolean;\n}\n\nexport interface UseTreeReturnType {\n  /** Determines whether multiple node can be selected at a time */\n  multiple: boolean;\n\n  /** A record of `node.value` and boolean values that represent nodes expanded state */\n  expandedState: TreeExpandedState;\n\n  /** An array of selected nodes values */\n  selectedState: string[];\n\n  /** An array of checked nodes values */\n  checkedState: string[];\n\n  /** A value of the node that was last clicked\n   * Anchor node is used to determine range of selected nodes for multiple selection\n   */\n  anchorNode: string | null;\n\n  /** Initializes tree state based on provided data, called automatically by the Tree component */\n  initialize: (data: TreeNodeData[]) => void;\n\n  /** Toggles expanded state of the node with provided value */\n  toggleExpanded: (value: string) => void;\n\n  /** Collapses node with provided value */\n  collapse: (value: string) => void;\n\n  /** Expands node with provided value */\n  expand: (value: string) => void;\n\n  /** Expands all nodes */\n  expandAllNodes: () => void;\n\n  /** Collapses all nodes */\n  collapseAllNodes: () => void;\n\n  /** Sets expanded state */\n  setExpandedState: React.Dispatch<React.SetStateAction<TreeExpandedState>>;\n\n  /** Toggles selected state of the node with provided value */\n  toggleSelected: (value: string) => void;\n\n  /** Selects node with provided value */\n  select: (value: string) => void;\n\n  /** Deselects node with provided value */\n  deselect: (value: string) => void;\n\n  /** Clears selected state */\n  clearSelected: () => void;\n\n  /** Sets selected state */\n  setSelectedState: React.Dispatch<React.SetStateAction<string[]>>;\n\n  /** A value of the node that is currently hovered */\n  hoveredNode: string | null;\n\n  /** Sets hovered node */\n  setHoveredNode: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Checks node with provided value */\n  checkNode: (value: string) => void;\n\n  /** Unchecks node with provided value */\n  uncheckNode: (value: string) => void;\n\n  /** Returns all checked nodes with status */\n  getCheckedNodes: () => CheckedNodeStatus[];\n\n  /** Returns `true` if node with provided value is checked */\n  isNodeChecked: (value: string) => boolean;\n\n  /** Returns `true` if node with provided value is indeterminate */\n  isNodeIndeterminate: (value: string) => boolean;\n}\n\nexport function useTree({\n  initialSelectedState = [],\n  initialCheckedState = [],\n  initialExpandedState = {},\n  multiple = false,\n}: UseTreeInput = {}): UseTreeReturnType {\n  const [data, setData] = useState<TreeNodeData[]>([]);\n  const [expandedState, setExpandedState] = useState(initialExpandedState);\n  const [selectedState, setSelectedState] = useState(initialSelectedState);\n  const [checkedState, setCheckedState] = useState(initialCheckedState);\n  const [anchorNode, setAnchorNode] = useState<string | null>(null);\n  const [hoveredNode, setHoveredNode] = useState<string | null>(null);\n\n  const initialize = useCallback(\n    (_data: TreeNodeData[]) => {\n      setExpandedState((current) => getInitialExpandedState(current, _data, selectedState));\n      setCheckedState((current) => getInitialCheckedState(current, _data));\n      setData(_data);\n    },\n    [selectedState, checkedState]\n  );\n\n  const toggleExpanded = useCallback((value: string) => {\n    setExpandedState((current) => ({ ...current, [value]: !current[value] }));\n  }, []);\n\n  const collapse = useCallback((value: string) => {\n    setExpandedState((current) => ({ ...current, [value]: false }));\n  }, []);\n\n  const expand = useCallback((value: string) => {\n    setExpandedState((current) => ({ ...current, [value]: true }));\n  }, []);\n\n  const expandAllNodes = useCallback(() => {\n    setExpandedState((current) => {\n      const next = { ...current };\n      Object.keys(next).forEach((key) => {\n        next[key] = true;\n      });\n\n      return next;\n    });\n  }, []);\n\n  const collapseAllNodes = useCallback(() => {\n    setExpandedState((current) => {\n      const next = { ...current };\n      Object.keys(next).forEach((key) => {\n        next[key] = false;\n      });\n\n      return next;\n    });\n  }, []);\n\n  const toggleSelected = useCallback(\n    (value: string) =>\n      setSelectedState((current) => {\n        if (!multiple) {\n          if (current.includes(value)) {\n            setAnchorNode(null);\n            return [];\n          }\n\n          setAnchorNode(value);\n          return [value];\n        }\n\n        if (current.includes(value)) {\n          setAnchorNode(null);\n          return current.filter((item) => item !== value);\n        }\n\n        setAnchorNode(value);\n\n        return [...current, value];\n      }),\n    []\n  );\n\n  const select = useCallback((value: string) => {\n    setAnchorNode(value);\n    setSelectedState((current) =>\n      multiple ? (current.includes(value) ? current : [...current, value]) : [value]\n    );\n  }, []);\n\n  const deselect = useCallback((value: string) => {\n    anchorNode === value && setAnchorNode(null);\n    setSelectedState((current) => current.filter((item) => item !== value));\n  }, []);\n\n  const clearSelected = useCallback(() => {\n    setSelectedState([]);\n    setAnchorNode(null);\n  }, []);\n\n  const checkNode = useCallback(\n    (value: string) => {\n      const checkedNodes = getChildrenNodesValues(value, data);\n      setCheckedState((current) => Array.from(new Set([...current, ...checkedNodes])));\n    },\n    [data]\n  );\n\n  const uncheckNode = useCallback(\n    (value: string) => {\n      const checkedNodes = getChildrenNodesValues(value, data);\n      setCheckedState((current) => current.filter((item) => !checkedNodes.includes(item)));\n    },\n    [data]\n  );\n\n  const getCheckedNodes = () => getAllCheckedNodes(data, checkedState).result;\n  const isNodeChecked = (value: string) => memoizedIsNodeChecked(value, data, checkedState);\n  const isNodeIndeterminate = (value: string) =>\n    memoizedIsNodeIndeterminate(value, data, checkedState);\n\n  return {\n    multiple,\n    expandedState,\n    selectedState,\n    checkedState,\n    anchorNode,\n    initialize,\n\n    toggleExpanded,\n    collapse,\n    expand,\n    expandAllNodes,\n    collapseAllNodes,\n    setExpandedState,\n    checkNode,\n    uncheckNode,\n\n    toggleSelected,\n    select,\n    deselect,\n    clearSelected,\n    setSelectedState,\n\n    hoveredNode,\n    setHoveredNode,\n    getCheckedNodes,\n    isNodeChecked,\n    isNodeIndeterminate,\n  };\n}\n\nexport type TreeController = ReturnType<typeof useTree>;\n"],"mappings":";;;;;;;AAQA,SAASA,uBAAuBA,CAACC,YAAY,EAAEC,IAAI,EAAEC,KAAK,EAAEC,GAAG,GAAG,EAAE,EAAE;EACpEF,IAAI,CAACG,OAAO,CAAEC,IAAI,IAAK;IACrBF,GAAG,CAACE,IAAI,CAACH,KAAK,CAAC,GAAGG,IAAI,CAACH,KAAK,IAAIF,YAAY,GAAGA,YAAY,CAACK,IAAI,CAACH,KAAK,CAAC,GAAGG,IAAI,CAACH,KAAK,KAAKA,KAAK;IAC9F,IAAII,KAAK,CAACC,OAAO,CAACF,IAAI,CAACG,QAAQ,CAAC,EAAE;MAChCT,uBAAuB,CAACC,YAAY,EAAEK,IAAI,CAACG,QAAQ,EAAEN,KAAK,EAAEC,GAAG,CAAC;IACjE;EACL,CAAG,CAAC;EACF,OAAOA,GAAG;AACZ;AACA,SAASM,sBAAsBA,CAACT,YAAY,EAAEC,IAAI,EAAE;EAClD,MAAME,GAAG,GAAG,EAAE;EACdH,YAAY,CAACI,OAAO,CAAEC,IAAI,IAAKF,GAAG,CAACO,IAAI,CAAC,GAAGC,sBAAsB,CAACN,IAAI,EAAEJ,IAAI,CAAC,CAAC,CAAC;EAC/E,OAAOE,GAAG;AACZ;AACO,SAASS,OAAOA,CAAC;EACtBC,oBAAoB,GAAG,EAAE;EACzBC,mBAAmB,GAAG,EAAE;EACxBC,oBAAoB,GAAG,CAAE;EACzBC,QAAQ,GAAG;AACb,CAAC,GAAG,EAAE,EAAE;EACN,MAAM,CAACf,IAAI,EAAEgB,OAAO,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGF,QAAQ,CAACH,oBAAoB,CAAC;EACxE,MAAM,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGJ,QAAQ,CAACL,oBAAoB,CAAC;EACxE,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAACJ,mBAAmB,CAAC;EACrE,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMW,UAAU,GAAGC,WAAW,CAC3BC,KAAK,IAAK;IACTX,gBAAgB,CAAEY,OAAO,IAAKjC,uBAAuB,CAACiC,OAAO,EAAED,KAAK,EAAEV,aAAa,CAAC,CAAC;IACrFG,eAAe,CAAEQ,OAAO,IAAKvB,sBAAsB,CAACuB,OAAO,EAAED,KAAK,CAAC,CAAC;IACpEd,OAAO,CAACc,KAAK,CAAC;EACf,GACD,CAACV,aAAa,EAAEE,YAAY,CAChC,CAAG;EACD,MAAMU,cAAc,GAAGH,WAAW,CAAE5B,KAAK,IAAK;IAC5CkB,gBAAgB,CAAEY,OAAO,KAAM;MAAE,GAAGA,OAAO;MAAE,CAAC9B,KAAK,GAAG,CAAC8B,OAAO,CAAC9B,KAAK;IAAG,EAAC,CAAC;EAC1E,GAAE,EAAE,CAAC;EACN,MAAMgC,QAAQ,GAAGJ,WAAW,CAAE5B,KAAK,IAAK;IACtCkB,gBAAgB,CAAEY,OAAO,KAAM;MAAE,GAAGA,OAAO;MAAE,CAAC9B,KAAK,GAAG;IAAO,EAAC,CAAC;EAChE,GAAE,EAAE,CAAC;EACN,MAAMiC,MAAM,GAAGL,WAAW,CAAE5B,KAAK,IAAK;IACpCkB,gBAAgB,CAAEY,OAAO,KAAM;MAAE,GAAGA,OAAO;MAAE,CAAC9B,KAAK,GAAG;IAAM,EAAC,CAAC;EAC/D,GAAE,EAAE,CAAC;EACN,MAAMkC,cAAc,GAAGN,WAAW,CAAC,MAAM;IACvCV,gBAAgB,CAAEY,OAAO,IAAK;MAC5B,MAAMK,IAAI,GAAG;QAAE,GAAGL;MAAO,CAAE;MAC3BM,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACjC,OAAO,CAAEoC,GAAG,IAAK;QACjCH,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI;MACxB,CAAO,CAAC;MACF,OAAOH,IAAI;IACjB,CAAK,CAAC;EACH,GAAE,EAAE,CAAC;EACN,MAAMI,gBAAgB,GAAGX,WAAW,CAAC,MAAM;IACzCV,gBAAgB,CAAEY,OAAO,IAAK;MAC5B,MAAMK,IAAI,GAAG;QAAE,GAAGL;MAAO,CAAE;MAC3BM,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACjC,OAAO,CAAEoC,GAAG,IAAK;QACjCH,IAAI,CAACG,GAAG,CAAC,GAAG,KAAK;MACzB,CAAO,CAAC;MACF,OAAOH,IAAI;IACjB,CAAK,CAAC;EACH,GAAE,EAAE,CAAC;EACN,MAAMK,cAAc,GAAGZ,WAAW,CAC/B5B,KAAK,IAAKoB,gBAAgB,CAAEU,OAAO,IAAK;IACvC,IAAI,CAAChB,QAAQ,EAAE;MACb,IAAIgB,OAAO,CAACW,QAAQ,CAACzC,KAAK,CAAC,EAAE;QAC3BwB,aAAa,CAAC,IAAI,CAAC;QACnB,OAAO,EAAE;MACV;MACDA,aAAa,CAACxB,KAAK,CAAC;MACpB,OAAO,CAACA,KAAK,CAAC;IACf;IACD,IAAI8B,OAAO,CAACW,QAAQ,CAACzC,KAAK,CAAC,EAAE;MAC3BwB,aAAa,CAAC,IAAI,CAAC;MACnB,OAAOM,OAAO,CAACY,MAAM,CAAEC,IAAI,IAAKA,IAAI,KAAK3C,KAAK,CAAC;IAChD;IACDwB,aAAa,CAACxB,KAAK,CAAC;IACpB,OAAO,CAAC,GAAG8B,OAAO,EAAE9B,KAAK,CAAC;EAChC,CAAK,CAAC,EACF,EACJ,CAAG;EACD,MAAM4C,MAAM,GAAGhB,WAAW,CAAE5B,KAAK,IAAK;IACpCwB,aAAa,CAACxB,KAAK,CAAC;IACpBoB,gBAAgB,CACbU,OAAO,IAAKhB,QAAQ,GAAGgB,OAAO,CAACW,QAAQ,CAACzC,KAAK,CAAC,GAAG8B,OAAO,GAAG,CAAC,GAAGA,OAAO,EAAE9B,KAAK,CAAC,GAAG,CAACA,KAAK,CAC9F,CAAK;EACF,GAAE,EAAE,CAAC;EACN,MAAM6C,QAAQ,GAAGjB,WAAW,CAAE5B,KAAK,IAAK;IACtCuB,UAAU,KAAKvB,KAAK,IAAIwB,aAAa,CAAC,IAAI,CAAC;IAC3CJ,gBAAgB,CAAEU,OAAO,IAAKA,OAAO,CAACY,MAAM,CAAEC,IAAI,IAAKA,IAAI,KAAK3C,KAAK,CAAC,CAAC;EACxE,GAAE,EAAE,CAAC;EACN,MAAM8C,aAAa,GAAGlB,WAAW,CAAC,MAAM;IACtCR,gBAAgB,CAAC,EAAE,CAAC;IACpBI,aAAa,CAAC,IAAI,CAAC;EACpB,GAAE,EAAE,CAAC;EACN,MAAMuB,SAAS,GAAGnB,WAAW,CAC1B5B,KAAK,IAAK;IACT,MAAMgD,YAAY,GAAGvC,sBAAsB,CAACT,KAAK,EAAED,IAAI,CAAC;IACxDuB,eAAe,CAAEQ,OAAO,IAAK1B,KAAK,CAAC6C,IAAI,gBAAiB,IAAIC,GAAG,CAAC,CAAC,GAAGpB,OAAO,EAAE,GAAGkB,YAAY,CAAC,CAAC,CAAC,CAAC;EACjG,GACD,CAACjD,IAAI,CACT,CAAG;EACD,MAAMoD,WAAW,GAAGvB,WAAW,CAC5B5B,KAAK,IAAK;IACT,MAAMgD,YAAY,GAAGvC,sBAAsB,CAACT,KAAK,EAAED,IAAI,CAAC;IACxDuB,eAAe,CAAEQ,OAAO,IAAKA,OAAO,CAACY,MAAM,CAAEC,IAAI,IAAK,CAACK,YAAY,CAACP,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;EACrF,GACD,CAAC5C,IAAI,CACT,CAAG;EACD,MAAMqD,eAAe,GAAGA,CAAA,KAAMC,kBAAkB,CAACtD,IAAI,EAAEsB,YAAY,CAAC,CAACiC,MAAM;EAC3E,MAAMC,aAAa,GAAIvD,KAAK,IAAKwD,qBAAqB,CAACxD,KAAK,EAAED,IAAI,EAAEsB,YAAY,CAAC;EACjF,MAAMoC,mBAAmB,GAAIzD,KAAK,IAAK0D,2BAA2B,CAAC1D,KAAK,EAAED,IAAI,EAAEsB,YAAY,CAAC;EAC7F,OAAO;IACLP,QAAQ;IACRG,aAAa;IACbE,aAAa;IACbE,YAAY;IACZE,UAAU;IACVI,UAAU;IACVI,cAAc;IACdC,QAAQ;IACRC,MAAM;IACNC,cAAc;IACdK,gBAAgB;IAChBrB,gBAAgB;IAChB6B,SAAS;IACTI,WAAW;IACXX,cAAc;IACdI,MAAM;IACNC,QAAQ;IACRC,aAAa;IACb1B,gBAAgB;IAChBK,WAAW;IACXC,cAAc;IACd0B,eAAe;IACfG,aAAa;IACbE;EACJ,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}