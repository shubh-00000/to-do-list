{"ast":null,"code":"'use client';\n\nfunction findTreeNode(value, data) {\n  for (const node of data) {\n    if (node.value === value) {\n      return node;\n    }\n    if (Array.isArray(node.children)) {\n      const childNode = findTreeNode(value, node.children);\n      if (childNode) {\n        return childNode;\n      }\n    }\n  }\n  return null;\n}\nfunction getChildrenNodesValues(value, data, acc = []) {\n  const node = findTreeNode(value, data);\n  if (!node) {\n    return acc;\n  }\n  if (!Array.isArray(node.children) || node.children.length === 0) {\n    return [node.value];\n  }\n  node.children.forEach(child => {\n    if (Array.isArray(child.children) && child.children.length > 0) {\n      getChildrenNodesValues(child.value, data, acc);\n    } else {\n      acc.push(child.value);\n    }\n  });\n  return acc;\n}\nexport { findTreeNode, getChildrenNodesValues };","map":{"version":3,"names":["findTreeNode","value","data","node","Array","isArray","children","childNode","getChildrenNodesValues","acc","length","forEach","child","push"],"sources":["C:\\Users\\arora\\OneDrive\\Desktop\\g\\new\\node_modules\\@mantine\\core\\src\\components\\Tree\\get-children-nodes-values\\get-children-nodes-values.ts"],"sourcesContent":["import type { TreeNodeData } from '../Tree';\n\nexport function findTreeNode(value: string, data: TreeNodeData[]): TreeNodeData | null {\n  for (const node of data) {\n    if (node.value === value) {\n      return node;\n    }\n\n    if (Array.isArray(node.children)) {\n      const childNode = findTreeNode(value, node.children);\n      if (childNode) {\n        return childNode;\n      }\n    }\n  }\n\n  return null;\n}\n\n// Returns values for all nested nodes which do not have children\nexport function getChildrenNodesValues(\n  value: string,\n  data: TreeNodeData[],\n  acc: string[] = []\n): string[] {\n  const node = findTreeNode(value, data);\n  if (!node) {\n    return acc;\n  }\n\n  if (!Array.isArray(node.children) || node.children.length === 0) {\n    return [node.value];\n  }\n\n  node.children.forEach((child) => {\n    if (Array.isArray(child.children) && child.children.length > 0) {\n      getChildrenNodesValues(child.value, data, acc);\n    } else {\n      acc.push(child.value);\n    }\n  });\n\n  return acc;\n}\n"],"mappings":";;AACO,SAASA,YAAYA,CAACC,KAAK,EAAEC,IAAI,EAAE;EACxC,KAAK,MAAMC,IAAI,IAAID,IAAI,EAAE;IACvB,IAAIC,IAAI,CAACF,KAAK,KAAKA,KAAK,EAAE;MACxB,OAAOE,IAAI;IACZ;IACD,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAACG,QAAQ,CAAC,EAAE;MAChC,MAAMC,SAAS,GAAGP,YAAY,CAACC,KAAK,EAAEE,IAAI,CAACG,QAAQ,CAAC;MACpD,IAAIC,SAAS,EAAE;QACb,OAAOA,SAAS;MACjB;IACF;EACF;EACD,OAAO,IAAI;AACb;AACO,SAASC,sBAAsBA,CAACP,KAAK,EAAEC,IAAI,EAAEO,GAAG,GAAG,EAAE,EAAE;EAC5D,MAAMN,IAAI,GAAGH,YAAY,CAACC,KAAK,EAAEC,IAAI,CAAC;EACtC,IAAI,CAACC,IAAI,EAAE;IACT,OAAOM,GAAG;EACX;EACD,IAAI,CAACL,KAAK,CAACC,OAAO,CAACF,IAAI,CAACG,QAAQ,CAAC,IAAIH,IAAI,CAACG,QAAQ,CAACI,MAAM,KAAK,CAAC,EAAE;IAC/D,OAAO,CAACP,IAAI,CAACF,KAAK,CAAC;EACpB;EACDE,IAAI,CAACG,QAAQ,CAACK,OAAO,CAAEC,KAAK,IAAK;IAC/B,IAAIR,KAAK,CAACC,OAAO,CAACO,KAAK,CAACN,QAAQ,CAAC,IAAIM,KAAK,CAACN,QAAQ,CAACI,MAAM,GAAG,CAAC,EAAE;MAC9DF,sBAAsB,CAACI,KAAK,CAACX,KAAK,EAAEC,IAAI,EAAEO,GAAG,CAAC;IACpD,CAAK,MAAM;MACLA,GAAG,CAACI,IAAI,CAACD,KAAK,CAACX,KAAK,CAAC;IACtB;EACL,CAAG,CAAC;EACF,OAAOQ,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}